/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SemiFinishedProductService } from "../semiFinishedProduct.service";
import { SemiFinishedProductCreateInput } from "./SemiFinishedProductCreateInput";
import { SemiFinishedProduct } from "./SemiFinishedProduct";
import { SemiFinishedProductFindManyArgs } from "./SemiFinishedProductFindManyArgs";
import { SemiFinishedProductWhereUniqueInput } from "./SemiFinishedProductWhereUniqueInput";
import { SemiFinishedProductUpdateInput } from "./SemiFinishedProductUpdateInput";

export class SemiFinishedProductControllerBase {
  constructor(protected readonly service: SemiFinishedProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SemiFinishedProduct })
  async createSemiFinishedProduct(
    @common.Body() data: SemiFinishedProductCreateInput
  ): Promise<SemiFinishedProduct> {
    return await this.service.createSemiFinishedProduct({
      data: data,
      select: {
        batchNumber: true,
        createdAt: true,
        expiringDate: true,
        id: true,
        ingredients: true,
        name: true,
        productionDate: true,
        quantity: true,
        unitOfMeasure: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SemiFinishedProduct] })
  @ApiNestedQuery(SemiFinishedProductFindManyArgs)
  async semiFinishedProducts(
    @common.Req() request: Request
  ): Promise<SemiFinishedProduct[]> {
    const args = plainToClass(SemiFinishedProductFindManyArgs, request.query);
    return this.service.semiFinishedProducts({
      ...args,
      select: {
        batchNumber: true,
        createdAt: true,
        expiringDate: true,
        id: true,
        ingredients: true,
        name: true,
        productionDate: true,
        quantity: true,
        unitOfMeasure: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SemiFinishedProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async semiFinishedProduct(
    @common.Param() params: SemiFinishedProductWhereUniqueInput
  ): Promise<SemiFinishedProduct | null> {
    const result = await this.service.semiFinishedProduct({
      where: params,
      select: {
        batchNumber: true,
        createdAt: true,
        expiringDate: true,
        id: true,
        ingredients: true,
        name: true,
        productionDate: true,
        quantity: true,
        unitOfMeasure: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SemiFinishedProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSemiFinishedProduct(
    @common.Param() params: SemiFinishedProductWhereUniqueInput,
    @common.Body() data: SemiFinishedProductUpdateInput
  ): Promise<SemiFinishedProduct | null> {
    try {
      return await this.service.updateSemiFinishedProduct({
        where: params,
        data: data,
        select: {
          batchNumber: true,
          createdAt: true,
          expiringDate: true,
          id: true,
          ingredients: true,
          name: true,
          productionDate: true,
          quantity: true,
          unitOfMeasure: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SemiFinishedProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSemiFinishedProduct(
    @common.Param() params: SemiFinishedProductWhereUniqueInput
  ): Promise<SemiFinishedProduct | null> {
    try {
      return await this.service.deleteSemiFinishedProduct({
        where: params,
        select: {
          batchNumber: true,
          createdAt: true,
          expiringDate: true,
          id: true,
          ingredients: true,
          name: true,
          productionDate: true,
          quantity: true,
          unitOfMeasure: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
