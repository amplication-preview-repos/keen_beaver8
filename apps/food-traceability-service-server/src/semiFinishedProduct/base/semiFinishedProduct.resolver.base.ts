/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SemiFinishedProduct } from "./SemiFinishedProduct";
import { SemiFinishedProductCountArgs } from "./SemiFinishedProductCountArgs";
import { SemiFinishedProductFindManyArgs } from "./SemiFinishedProductFindManyArgs";
import { SemiFinishedProductFindUniqueArgs } from "./SemiFinishedProductFindUniqueArgs";
import { CreateSemiFinishedProductArgs } from "./CreateSemiFinishedProductArgs";
import { UpdateSemiFinishedProductArgs } from "./UpdateSemiFinishedProductArgs";
import { DeleteSemiFinishedProductArgs } from "./DeleteSemiFinishedProductArgs";
import { SemiFinishedProductService } from "../semiFinishedProduct.service";
@graphql.Resolver(() => SemiFinishedProduct)
export class SemiFinishedProductResolverBase {
  constructor(protected readonly service: SemiFinishedProductService) {}

  async _semiFinishedProductsMeta(
    @graphql.Args() args: SemiFinishedProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SemiFinishedProduct])
  async semiFinishedProducts(
    @graphql.Args() args: SemiFinishedProductFindManyArgs
  ): Promise<SemiFinishedProduct[]> {
    return this.service.semiFinishedProducts(args);
  }

  @graphql.Query(() => SemiFinishedProduct, { nullable: true })
  async semiFinishedProduct(
    @graphql.Args() args: SemiFinishedProductFindUniqueArgs
  ): Promise<SemiFinishedProduct | null> {
    const result = await this.service.semiFinishedProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SemiFinishedProduct)
  async createSemiFinishedProduct(
    @graphql.Args() args: CreateSemiFinishedProductArgs
  ): Promise<SemiFinishedProduct> {
    return await this.service.createSemiFinishedProduct({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SemiFinishedProduct)
  async updateSemiFinishedProduct(
    @graphql.Args() args: UpdateSemiFinishedProductArgs
  ): Promise<SemiFinishedProduct | null> {
    try {
      return await this.service.updateSemiFinishedProduct({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SemiFinishedProduct)
  async deleteSemiFinishedProduct(
    @graphql.Args() args: DeleteSemiFinishedProductArgs
  ): Promise<SemiFinishedProduct | null> {
    try {
      return await this.service.deleteSemiFinishedProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
